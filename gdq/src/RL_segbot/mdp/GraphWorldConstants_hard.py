#!/usr/bin/env python
import numpy as np

ROUND_OFF = 5
ACTIONS = ["goto", "approach", "opendoor", "gothrough"]

NODE_NUM = 16
START_NODES = (5,)
GOAL_NODES = (15,)

has_door_nodes_tuple = (1, 2, 3, 4, 6, 7, 9, 10, 12, 13)
door_open_nodes_dict = {1: False,
                        2: False,
                        3: False,
                        4: False,
                        9: True,
                        10: True,
                        6: False,
                        7: False,
                        12: False,
                        13: False
                        }
goal_reward = 1000
stack_cost = 1000

door_id_dict = {1: 0,
                2: 1,
                3: 0,
                4: 1,
                9: 2,
                10: 2,
                6: 3,
                7: 3,
                12: 4,
                13: 4
                }

env0 = {0: [1.0, 0.0, 0.0],
        1: [1.0, 0.0, 0.0],
        2: [1.0, 0.0, 0.0],
        3: [1.0, 0.0, 0.0],
        4: [1.0, 0.0, 0.0],
        5: [1.0, 0.0, 0.0],
        6: [0.5, 0.5, 0.0],
        7: [0.5, 0.5, 0.0],
        8: [1.0, 0.0, 0.0],
        9: [0.9, 0.1, 0.0],
        10: [0.9, 0.1, 0.0],
        11: [1.0, 0.0, 0.0],
        12: [1.0, 0.0, 0.0],
        13: [1.0, 0.0, 0.0],
        14: [1.0, 0.0, 0.0],
        15: [1.0, 0.0, 0.0],
        }

times = {"s0": {"s1": 30.0, "s2": 30.0},
         "s1": {"s0": 30.0, "s2": 60.0, "s3": 11.0},
         "s2": {"s0": 30.0, "s1": 60.0, "s4": 12.0},
         "s3": {"s1": 11.0, "s5": 20.0},
         "s4": {"s2": 12.0, "s8": 10.0},
         "s5": {"s3": 20.0, "s6": 60.0, "s8": 150},
         "s6": {"s5": 60.0, "s7": 11.0},
         "s7": {"s6": 11.0, "s15": 120.0},
         "s8": {"s4": 10.0, "s5": 150.0, "s9": 20.0, "s11": 60.0},
         "s9": {"s8": 20.0, "s10": 14.0},
         "s10": {"s9": 14.0, "s15": 40.0},
         "s11": {"s8": 60.0, "s12": 70.0},
         "s12": {"s11": 70.0, "s13": 15.0},
         "s13": {"s12": 15.0, "s14": 40.0},
         "s14": {"s13": 40.0, "s15": 120.0},
         "s15": {"s7": 120.0, "s10": 40.0, "s14": 120.0},
         }


def distance(x1, y1, x2, y2):
    return np.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)


def get_match_door(_id):
    for key, val in door_id_dict.items():
        if door_id_dict[_id] == val and not _id == key:
            return key
